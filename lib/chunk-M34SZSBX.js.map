{"version":3,"sources":["../src/adapter/property.ts"],"sourcesContent":["import { BaseProperty, PropertyType } from 'adminjs'\n\nimport { LucidColumnMetadata } from '../types.js'\nimport { TypeConverter, databaseTypeToAdminType } from './type_converter.js'\n\nexport default class Property extends BaseProperty {\n  protected typeConverter: TypeConverter\n\n  constructor(\n    protected columnOptions: LucidColumnMetadata,\n    protected defaultPath: string,\n    protected defaultPosition: number\n  ) {\n    super({\n      path: defaultPath,\n      position: defaultPosition,\n    })\n    this.typeConverter = databaseTypeToAdminType\n  }\n\n  setTypeConverter(customTypeConverter: (dataType: string) => PropertyType) {\n    this.typeConverter = customTypeConverter\n  }\n\n  isId(): boolean {\n    return this.columnOptions.lucidColumn.isPrimary\n  }\n\n  isEditable(): boolean {\n    // Figure out a better way of detecting automatically generated timestamps\n    return (\n      !this.isId() &&\n      this.columnOptions.lucidColumn.columnName !== 'createdAt' &&\n      this.columnOptions.lucidColumn.columnName !== 'updatedAt'\n    )\n  }\n\n  name(): string {\n    return this.defaultPath\n  }\n\n  isRequired(): boolean {\n    return !this.columnOptions.databaseColumn.is_nullable\n  }\n\n  isSortable(): boolean {\n    return this.type() !== 'reference'\n  }\n\n  reference(): string | null {\n    const isRef = this.columnOptions.lucidRelation?.relationName\n\n    if (isRef) {\n      return this.columnOptions.lucidRelation?.relatedModel()?.table ?? null\n    }\n\n    return null\n  }\n\n  availableValues(): Array<string> | null {\n    return null\n  }\n\n  position(): number {\n    return this.defaultPosition\n  }\n\n  type(): PropertyType {\n    if (this.reference()) {\n      return 'reference'\n    }\n\n    const type = this.typeConverter(this.columnOptions.databaseColumn.data_type)\n    // eslint-disable-next-line no-console\n    if (!type) {\n      console.warn(`Unhandled type: ${this.columnOptions.databaseColumn.data_type}`)\n    }\n\n    return type\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,oBAAkC;AAK3C,IAAqBC,WAArB,cAAsCC,aAAAA;EALtC,OAKsCA;;;;;;EAC1BC;EAEVC,YACYC,eACAC,aACAC,iBACV;AACA,UAAM;MACJC,MAAMF;MACNG,UAAUF;IACZ,CAAA;SAPUF,gBAAAA;SACAC,cAAAA;SACAC,kBAAAA;AAMV,SAAKJ,gBAAgBO;EACvB;EAEAC,iBAAiBC,qBAAyD;AACxE,SAAKT,gBAAgBS;EACvB;EAEAC,OAAgB;AACd,WAAO,KAAKR,cAAcS,YAAYC;EACxC;EAEAC,aAAsB;AAEpB,WACE,CAAC,KAAKH,KAAI,KACV,KAAKR,cAAcS,YAAYG,eAAe,eAC9C,KAAKZ,cAAcS,YAAYG,eAAe;EAElD;EAEAC,OAAe;AACb,WAAO,KAAKZ;EACd;EAEAa,aAAsB;AACpB,WAAO,CAAC,KAAKd,cAAce,eAAeC;EAC5C;EAEAC,aAAsB;AACpB,WAAO,KAAKC,KAAI,MAAO;EACzB;EAEAC,YAA2B;AACzB,UAAMC,QAAQ,KAAKpB,cAAcqB,eAAeC;AAEhD,QAAIF,OAAO;AACT,aAAO,KAAKpB,cAAcqB,eAAeE,aAAAA,GAAgBC,SAAS;IACpE;AAEA,WAAO;EACT;EAEAC,kBAAwC;AACtC,WAAO;EACT;EAEArB,WAAmB;AACjB,WAAO,KAAKF;EACd;EAEAgB,OAAqB;AACnB,QAAI,KAAKC,UAAS,GAAI;AACpB,aAAO;IACT;AAEA,UAAMD,OAAO,KAAKpB,cAAc,KAAKE,cAAce,eAAeW,SAAS;AAE3E,QAAI,CAACR,MAAM;AACTS,cAAQC,KAAK,mBAAmB,KAAK5B,cAAce,eAAeW,SAAS,EAAE;IAC/E;AAEA,WAAOR;EACT;AACF;","names":["BaseProperty","Property","BaseProperty","typeConverter","constructor","columnOptions","defaultPath","defaultPosition","path","position","databaseTypeToAdminType","setTypeConverter","customTypeConverter","isId","lucidColumn","isPrimary","isEditable","columnName","name","isRequired","databaseColumn","is_nullable","isSortable","type","reference","isRef","lucidRelation","relationName","relatedModel","table","availableValues","data_type","console","warn"]}