{"version":3,"sources":["../../providers/adminjs_provider.ts"],"sourcesContent":["import { ApplicationService } from '@adonisjs/core/types'\nimport AdminJS, { AdminJSOptions } from 'adminjs'\nimport SchemaInspector from 'knex-schema-inspector'\nimport db from '@adonisjs/lucid/services/db'\nimport { RuntimeException } from '@adonisjs/core/exceptions'\n\nimport AdminJSRouter from '../src/plugin/router.js'\nimport Resource from '../src/adapter/resource.js'\nimport Database from '../src/adapter/database.js'\nimport { AdminJSProviderConfig } from '../src/types.js'\nimport LucidResource from '../src/adapter/lucid_resource.js'\n\nexport default class AdminJSProvider {\n  constructor(protected app: ApplicationService) {}\n\n  register() {\n    /* Create AdminJS instance */\n    this.app.container.singleton(AdminJS, async (resolver) => {\n      const configService = await resolver.make('config')\n      const adminConfig = configService.get<AdminJSProviderConfig>('adminjs')\n\n      const options: Omit<AdminJSOptions, 'resources' | 'databases'> & {\n        resources?: LucidResource[]\n      } = adminConfig.adminjs ?? {}\n\n      if (adminConfig.adapter.enabled) {\n        for (const resource of adminConfig.adminjs.resources ?? []) {\n          const knexInstance = db.connection(resource.connectionName).getReadClient()\n          if (!knexInstance) {\n            throw new RuntimeException('Could not load Knex instance to fetch database schema.')\n          }\n\n          const inspector = SchemaInspector.default(knexInstance)\n          const actualResource = resource.resource ?? resource\n\n          await actualResource.assignMetadata(inspector)\n        }\n\n        AdminJS.registerAdapter({ Resource, Database })\n      }\n\n      const admin = new AdminJS(options)\n\n      return admin\n    })\n    /* Create AdminJS Router instance */\n    this.app.container.singleton(AdminJSRouter, async (resolver) => {\n      const admin = await resolver.make(AdminJS)\n\n      return new AdminJSRouter(admin)\n    })\n  }\n\n  async boot() {}\n\n  async start() {\n    const configService = await this.app.container.make('config')\n    const config = configService.get<AdminJSProviderConfig>('adminjs')\n    const router = await this.app.container.make(AdminJSRouter)\n\n    /* Build authenticated or public routes based on configuration */\n    if (config.auth.enabled) {\n      router.buildAuthenticatedRouter(config)\n    } else {\n      router.buildRouter(config)\n    }\n\n    const admin = await this.app.container.make(AdminJS)\n\n    /* Runtime bundling can be disabled completely */\n    if (process.env.ADMIN_JS_SKIP_BUNDLE === 'true') return\n\n    /* In production environment, the bundler should run only once on server's start\n    while in development it should rebundle when files are changed */\n    if (process.env.NODE_ENV === 'production') {\n      await admin.initialize()\n    } else {\n      admin.watch()\n    }\n  }\n\n  async ready() {}\n\n  async shutdown() {}\n}\n"],"mappings":";;;;;;;;;;;;;;;;AACA,OAAOA,aAAiC;AACxC,OAAOC,qBAAqB;AAC5B,OAAOC,QAAQ;AACf,SAASC,wBAAwB;AAQjC,IAAqBC,kBAArB,MAAqBA;EAXrB,OAWqBA;;;;EACnBC,YAAsBC,KAAyB;SAAzBA,MAAAA;EAA0B;EAEhDC,WAAW;AAET,SAAKD,IAAIE,UAAUC,UAAUC,SAAS,OAAOC,aAAAA;AAC3C,YAAMC,gBAAgB,MAAMD,SAASE,KAAK,QAAA;AAC1C,YAAMC,cAAcF,cAAcG,IAA2B,SAAA;AAE7D,YAAMC,UAEFF,YAAYG,WAAW,CAAC;AAE5B,UAAIH,YAAYI,QAAQC,SAAS;AAC/B,mBAAWC,YAAYN,YAAYG,QAAQI,aAAa,CAAA,GAAI;AAC1D,gBAAMC,eAAeC,GAAGC,WAAWJ,SAASK,cAAc,EAAEC,cAAa;AACzE,cAAI,CAACJ,cAAc;AACjB,kBAAM,IAAIK,iBAAiB,wDAAA;UAC7B;AAEA,gBAAMC,YAAYC,gBAAgBC,QAAQR,YAAAA;AAC1C,gBAAMS,iBAAiBX,SAASA,YAAYA;AAE5C,gBAAMW,eAAeC,eAAeJ,SAAAA;QACtC;AAEAlB,gBAAQuB,gBAAgB;UAAEC;UAAUC;QAAS,CAAA;MAC/C;AAEA,YAAMC,QAAQ,IAAI1B,QAAQM,OAAAA;AAE1B,aAAOoB;IACT,CAAA;AAEA,SAAK9B,IAAIE,UAAUC,UAAU4B,eAAe,OAAO1B,aAAAA;AACjD,YAAMyB,QAAQ,MAAMzB,SAASE,KAAKH,OAAAA;AAElC,aAAO,IAAI2B,cAAcD,KAAAA;IAC3B,CAAA;EACF;EAEA,MAAME,OAAO;EAAC;EAEd,MAAMC,QAAQ;AACZ,UAAM3B,gBAAgB,MAAM,KAAKN,IAAIE,UAAUK,KAAK,QAAA;AACpD,UAAM2B,SAAS5B,cAAcG,IAA2B,SAAA;AACxD,UAAM0B,SAAS,MAAM,KAAKnC,IAAIE,UAAUK,KAAKwB,aAAAA;AAG7C,QAAIG,OAAOE,KAAKvB,SAAS;AACvBsB,aAAOE,yBAAyBH,MAAAA;IAClC,OAAO;AACLC,aAAOG,YAAYJ,MAAAA;IACrB;AAEA,UAAMJ,QAAQ,MAAM,KAAK9B,IAAIE,UAAUK,KAAKH,OAAAA;AAG5C,QAAImC,QAAQC,IAAIC,yBAAyB;AAAQ;AAIjD,QAAIF,QAAQC,IAAIE,aAAa,cAAc;AACzC,YAAMZ,MAAMa,WAAU;IACxB,OAAO;AACLb,YAAMc,MAAK;IACb;EACF;EAEA,MAAMC,QAAQ;EAAC;EAEf,MAAMC,WAAW;EAAC;AACpB;","names":["AdminJS","SchemaInspector","db","RuntimeException","AdminJSProvider","constructor","app","register","container","singleton","AdminJS","resolver","configService","make","adminConfig","get","options","adminjs","adapter","enabled","resource","resources","knexInstance","db","connection","connectionName","getReadClient","RuntimeException","inspector","SchemaInspector","default","actualResource","assignMetadata","registerAdapter","Resource","Database","admin","AdminJSRouter","boot","start","config","router","auth","buildAuthenticatedRouter","buildRouter","process","env","ADMIN_JS_SKIP_BUNDLE","NODE_ENV","initialize","watch","ready","shutdown"]}