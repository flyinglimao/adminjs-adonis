{"version":3,"sources":["../src/adapter/resource.ts"],"sourcesContent":["import { BaseRecord, BaseResource, Filter, flat } from 'adminjs'\nimport { LucidModel, ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\n\nimport LucidResource from './lucid_resource.js'\nimport Property from './property.js'\n\nclass Resource extends BaseResource {\n  protected propertiesMap: Map<string, Property> = new Map()\n  protected model: LucidModel\n\n  constructor(protected lucidResource: LucidResource) {\n    super(lucidResource)\n\n    this.model = lucidResource.model\n\n    const metadata = this.lucidResource.getMetadata()\n    const columns = [...metadata.columns.entries()]\n\n    columns.forEach(([name, columnOptions], idx) => {\n      if (columnOptions) {\n        const property = new Property(columnOptions, name, idx)\n        this.propertiesMap.set(name, property)\n      }\n    })\n  }\n\n  static isAdapterFor(lucidResource: any) {\n    return (\n      typeof lucidResource?.getMetadata === 'function' &&\n      !!lucidResource.getMetadata().columns &&\n      !!lucidResource.getMetadata().relations\n    )\n  }\n\n  id() {\n    return this.model.table\n  }\n\n  name() {\n    return this.model.name\n  }\n\n  databaseType() {\n    return this.model.query().client.dialect.name\n  }\n\n  databaseName() {\n    return 'lucid'\n  }\n\n  properties() {\n    return [...this.propertiesMap.values()]\n  }\n\n  property(path: string) {\n    return this.propertiesMap.get(path) ?? null\n  }\n\n  async findOne(id: string): Promise<BaseRecord | null> {\n    const query = this.model.query().where(this.model.primaryKey, id)\n\n    const rawRecord = await query.first()\n\n    if (!rawRecord) {\n      return null\n    }\n\n    return new BaseRecord(rawRecord.toJSON(), this)\n  }\n\n  async find(\n    filter: Filter,\n    options: {\n      limit?: number | undefined\n      offset?: number | undefined\n      sort?:\n        | {\n            sortBy?: string | undefined\n            direction?: 'asc' | 'desc' | undefined\n          }\n        | undefined\n    }\n  ): Promise<BaseRecord[]> {\n    const query = this.applyFilters(this.model.query(), filter)\n\n    if (options.limit !== undefined) {\n      query.limit(options.limit)\n    }\n\n    if (options.offset !== undefined) {\n      query.offset(options.offset)\n    }\n\n    if (options.sort?.sortBy !== undefined && options.sort?.direction !== undefined) {\n      query.orderBy(options.sort.sortBy, options.sort.direction)\n    }\n\n    const rawRecords = await query\n\n    return rawRecords.map((r) => new BaseRecord(r.toJSON(), this))\n  }\n\n  async findMany(ids: string[]): Promise<BaseRecord[]> {\n    const query = this.model.query().whereIn(this.model.primaryKey, ids)\n\n    const rawRecords = await query\n\n    return rawRecords.map((r) => new BaseRecord(r.toJSON(), this))\n  }\n\n  async count(filter: Filter) {\n    const query = this.applyFilters(this.model.query(), filter)\n\n    const result = await query.count('*', 'count').first()\n\n    if (!result) {\n      return 0\n    }\n\n    return +result.$extras.count\n  }\n\n  async create(params: Record<string, any>) {\n    const unflattenedParams = flat.unflatten(params)\n    const object = new this.model().fill(unflattenedParams)\n\n    await object.save()\n\n    return object.toJSON()\n  }\n\n  async delete(id: string) {\n    const object = await this.model.find(id)\n\n    if (object) {\n      await object.delete()\n    }\n  }\n\n  async update(id: string, params: Record<string, any> = {}) {\n    const unflattenedParams = flat.unflatten(params)\n    const object = await this.model.find(id)\n\n    if (!object) return {}\n\n    object.merge(unflattenedParams)\n    await object.save()\n\n    return object.toJSON()\n  }\n\n  protected applyFilters(query: ModelQueryBuilderContract<LucidModel>, filter: Filter) {\n    Object.keys(filter.filters).forEach((key) => {\n      const filterElement = filter.filters[key]\n      const property = filterElement.property\n\n      if (property.type() === 'uuid' || property.isId() || property.type() === 'boolean') {\n        query.where(key, filterElement.value as string)\n      } else if (property.type() === 'string') {\n        const dialect = this.databaseType()\n\n        if (dialect === 'postgres') {\n          query.whereILike(key, `%${filterElement.value}%`)\n        } else {\n          query.whereLike(key, `%${filterElement.value}%`)\n        }\n      } else if (property.type() === 'date' || property.type() === 'datetime') {\n        if ((filterElement.value as { from: string }).from) {\n          query.where(key, '>=', (filterElement.value as { from: string }).from)\n        }\n        if ((filterElement.value as { to: string }).to) {\n          query.where(key, '<=', (filterElement.value as { to: string }).to)\n        }\n      } else {\n        query.where(key, filterElement.value as string)\n      }\n    })\n\n    return query\n  }\n}\n\nexport default Resource\n"],"mappings":"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","names":["BaseRecord","BaseResource","flat","Resource","BaseResource","propertiesMap","model","constructor","lucidResource","Map","metadata","getMetadata","columns","entries","forEach","name","columnOptions","idx","property","Property","set","isAdapterFor","relations","id","table","databaseType","query","client","dialect","databaseName","properties","values","path","get","findOne","where","primaryKey","rawRecord","first","BaseRecord","toJSON","find","filter","options","applyFilters","limit","undefined","offset","sort","sortBy","direction","orderBy","rawRecords","map","r","findMany","ids","whereIn","count","result","$extras","create","params","unflattenedParams","flat","unflatten","object","fill","save","delete","update","merge","Object","keys","filters","key","filterElement","type","isId","value","whereILike","whereLike","from","to"]}