{"version":3,"sources":["../src/plugin/router.ts","../src/plugin/middlewares.ts","../src/plugin/utils/path_utils.ts"],"sourcesContent":["import path from 'node:path'\nimport { HttpContext } from '@adonisjs/core/http'\nimport router from '@adonisjs/core/services/router'\nimport AdminJS, { Router as AdminRouter, BaseAuthProvider, RouterType } from 'adminjs'\nimport { SessionData } from '@adonisjs/session/types'\n\nimport { AdminJSProviderConfig, EnabledAuthOptions, SessionI } from '../types.js'\nimport { checkSession } from './middlewares.js'\nimport { normalizePath, parsePathParams } from './utils/path_utils.js'\n\ntype RequestMethod = 'get' | 'post' | 'put' | 'patch' | 'delete'\n\ndeclare module '@adonisjs/core/http' {\n  interface HttpContext {\n    session: SessionI & SessionData\n  }\n}\n\nexport default class AdminJSRouter {\n  private groupPrefix: string\n\n  constructor(protected admin: AdminJS) {\n    this.groupPrefix = admin.options.rootPath.startsWith('/')\n      ? admin.options.rootPath.slice(1)\n      : admin.options.rootPath\n  }\n\n  buildRouter(config: AdminJSProviderConfig) {\n    const { routes, assets } = AdminRouter\n\n    router\n      .group(() => {\n        assets.forEach((asset) => {\n          router.get(asset.path, this.assetHandler(asset))\n        })\n        routes.forEach((route) => {\n          const parsedPath = parsePathParams(route.path)\n\n          router[route.method.toLowerCase() as RequestMethod](parsedPath, this.routeHandler(route))\n        })\n      })\n      .prefix(this.groupPrefix)\n      .middleware(config.middlewares ?? [])\n\n    return this\n  }\n\n  buildAuthenticatedRouter(config: AdminJSProviderConfig) {\n    const { routes, assets } = AdminRouter\n\n    const bundleComponentsRoute = routes.find((r) => r.action === 'bundleComponents')\n    const authRoutes = routes.filter((r) => r.action !== 'bundleComponents')\n\n    this.admin.options.env = {\n      ...(this.admin.options.env ?? {}),\n      ...(config.auth as EnabledAuthOptions).provider.getUiProps(),\n    }\n\n    // Public routes\n    router\n      .group(() => {\n        assets.forEach((asset) => {\n          router.get(asset.path, this.assetHandler(asset))\n        })\n\n        if (bundleComponentsRoute) {\n          router.get(\n            parsePathParams(bundleComponentsRoute.path),\n            this.routeHandler(bundleComponentsRoute)\n          )\n        }\n\n        router.get(\n          normalizePath(this.admin.options.loginPath, this.admin.options.rootPath),\n          this.loginViewHandler((config.auth as EnabledAuthOptions).provider)\n        )\n\n        router.post(\n          normalizePath(this.admin.options.loginPath, this.admin.options.rootPath),\n          this.loginFormHandler((config.auth as EnabledAuthOptions).provider)\n        )\n\n        router.get(\n          normalizePath(this.admin.options.logoutPath, this.admin.options.rootPath),\n          this.logoutHandler((config.auth as EnabledAuthOptions).provider)\n        )\n      })\n      .prefix(this.groupPrefix)\n      .middleware(config.middlewares ?? [])\n\n    // Authenticated routes\n    router\n      .group(() => {\n        authRoutes.forEach((route) => {\n          const parsedPath = parsePathParams(route.path)\n\n          router[route.method.toLowerCase() as RequestMethod](parsedPath, this.routeHandler(route))\n        })\n      })\n      .prefix(this.groupPrefix)\n      .middleware([\n        checkSession(this.admin.options.loginPath),\n        ...((config.auth as EnabledAuthOptions).middlewares ?? []),\n      ])\n\n    return this\n  }\n\n  protected assetHandler(asset: RouterType['assets'][number]) {\n    return ({ response }: HttpContext) => {\n      return response.download(path.resolve(asset.src))\n    }\n  }\n\n  protected routeHandler(route: RouterType['routes'][number]) {\n    return async ({ session, request, params, response }: HttpContext) => {\n      const controller = new route.Controller({ admin: this.admin }, session?.get('adminUser'))\n\n      const parsedRequest = {\n        ...request,\n        params: params,\n        query: request.qs(),\n        payload: {\n          ...request.body(),\n          ...request.allFiles(),\n        },\n        method: request.method().toLowerCase() as RequestMethod,\n      }\n\n      const handledRoute = await controller[route.action](parsedRequest, response)\n\n      if (route.contentType) {\n        response.header('Content-Type', route.contentType)\n      }\n\n      return response.send(handledRoute)\n    }\n  }\n\n  protected loginViewHandler(provider: BaseAuthProvider) {\n    const baseProps = {\n      action: this.admin.options.loginPath,\n      errorMessage: null,\n    }\n\n    return async ({ response }: HttpContext) => {\n      const login = await this.admin.renderLogin({\n        ...baseProps,\n        ...(provider.getUiProps() ?? {}),\n      })\n\n      return response.send(login)\n    }\n  }\n\n  protected loginFormHandler(provider: BaseAuthProvider) {\n    return async (ctx: HttpContext) => {\n      const { request, response, params, session } = ctx\n\n      const adminUser = await provider.handleLogin(\n        {\n          headers: request.headers(),\n          query: request.qs(),\n          params: params,\n          data: request.body(),\n        },\n        ctx\n      )\n\n      if (adminUser) {\n        session?.put('adminUser', adminUser)\n\n        const redirectTo = session?.get('redirectTo')\n\n        await session?.commit()\n\n        if (redirectTo) {\n          return response.redirect(redirectTo)\n        }\n\n        return response.redirect(this.admin.options.rootPath)\n      }\n\n      const login = await this.admin.renderLogin({\n        action: this.admin.options.loginPath,\n        errorMessage: 'invalidCredentials',\n        ...provider.getUiProps(),\n      })\n\n      return response.send(login)\n    }\n  }\n\n  protected logoutHandler(provider: BaseAuthProvider) {\n    return async ({ request, response, session }: HttpContext) => {\n      await provider.handleLogout({ req: request, res: response })\n\n      session?.forget('adminUser')\n      await session?.commit()\n\n      return response.redirect(this.admin.options.loginPath)\n    }\n  }\n}\n","import { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport const checkSession = (loginPath: string) => {\n  return async (ctx: HttpContext, next: NextFn) => {\n    if (!ctx.session || !ctx.session.get('adminUser')) {\n      return ctx.response.redirect(loginPath)\n    }\n\n    return next()\n  }\n}\n","export const parsePathParams = (routePath: string) =>\n  routePath.replace(/\\{/g, ':').replace(/\\}/g, '')\n\nexport const normalizePath = (adminPath: string, rootPath: string) => {\n  const strippedRootPath = adminPath.replace(rootPath, '')\n\n  return strippedRootPath\n}\n"],"mappings":";;;;;AAAA,OAAOA,UAAU;AAEjB,OAAOC,YAAY;AACnB,SAAkBC,UAAUC,mBAAiD;;;ACAtE,IAAMC,eAAe,wBAACC,cAAAA;AAC3B,SAAO,OAAOC,KAAkBC,SAAAA;AAC9B,QAAI,CAACD,IAAIE,WAAW,CAACF,IAAIE,QAAQC,IAAI,WAAA,GAAc;AACjD,aAAOH,IAAII,SAASC,SAASN,SAAAA;IAC/B;AAEA,WAAOE,KAAAA;EACT;AACF,GAR4B;;;ACHrB,IAAMK,kBAAkB,wBAACC,cAC9BA,UAAUC,QAAQ,OAAO,GAAA,EAAKA,QAAQ,OAAO,EAAA,GADhB;AAGxB,IAAMC,gBAAgB,wBAACC,WAAmBC,aAAAA;AAC/C,QAAMC,mBAAmBF,UAAUF,QAAQG,UAAU,EAAA;AAErD,SAAOC;AACT,GAJ6B;;;AFe7B,IAAqBC,gBAArB,MAAqBA;EAlBrB,OAkBqBA;;;;EACXC;EAERC,YAAsBC,OAAgB;SAAhBA,QAAAA;AACpB,SAAKF,cAAcE,MAAMC,QAAQC,SAASC,WAAW,GAAA,IACjDH,MAAMC,QAAQC,SAASE,MAAM,CAAA,IAC7BJ,MAAMC,QAAQC;EACpB;EAEAG,YAAYC,QAA+B;AACzC,UAAM,EAAEC,QAAQC,OAAM,IAAKC;AAE3BC,WACGC,MAAM,MAAA;AACLH,aAAOI,QAAQ,CAACC,UAAAA;AACdH,eAAOI,IAAID,MAAME,MAAM,KAAKC,aAAaH,KAAAA,CAAAA;MAC3C,CAAA;AACAN,aAAOK,QAAQ,CAACK,UAAAA;AACd,cAAMC,aAAaC,gBAAgBF,MAAMF,IAAI;AAE7CL,eAAOO,MAAMG,OAAOC,YAAW,CAAA,EAAqBH,YAAY,KAAKI,aAAaL,KAAAA,CAAAA;MACpF,CAAA;IACF,CAAA,EACCM,OAAO,KAAKzB,WAAW,EACvB0B,WAAWlB,OAAOmB,eAAe,CAAA,CAAE;AAEtC,WAAO;EACT;EAEAC,yBAAyBpB,QAA+B;AACtD,UAAM,EAAEC,QAAQC,OAAM,IAAKC;AAE3B,UAAMkB,wBAAwBpB,OAAOqB,KAAK,CAACC,MAAMA,EAAEC,WAAW,kBAAA;AAC9D,UAAMC,aAAaxB,OAAOyB,OAAO,CAACH,MAAMA,EAAEC,WAAW,kBAAA;AAErD,SAAK9B,MAAMC,QAAQgC,MAAM;MACvB,GAAI,KAAKjC,MAAMC,QAAQgC,OAAO,CAAC;MAC/B,GAAI3B,OAAO4B,KAA4BC,SAASC,WAAU;IAC5D;AAGA1B,WACGC,MAAM,MAAA;AACLH,aAAOI,QAAQ,CAACC,UAAAA;AACdH,eAAOI,IAAID,MAAME,MAAM,KAAKC,aAAaH,KAAAA,CAAAA;MAC3C,CAAA;AAEA,UAAIc,uBAAuB;AACzBjB,eAAOI,IACLK,gBAAgBQ,sBAAsBZ,IAAI,GAC1C,KAAKO,aAAaK,qBAAAA,CAAAA;MAEtB;AAEAjB,aAAOI,IACLuB,cAAc,KAAKrC,MAAMC,QAAQqC,WAAW,KAAKtC,MAAMC,QAAQC,QAAQ,GACvE,KAAKqC,iBAAkBjC,OAAO4B,KAA4BC,QAAQ,CAAA;AAGpEzB,aAAO8B,KACLH,cAAc,KAAKrC,MAAMC,QAAQqC,WAAW,KAAKtC,MAAMC,QAAQC,QAAQ,GACvE,KAAKuC,iBAAkBnC,OAAO4B,KAA4BC,QAAQ,CAAA;AAGpEzB,aAAOI,IACLuB,cAAc,KAAKrC,MAAMC,QAAQyC,YAAY,KAAK1C,MAAMC,QAAQC,QAAQ,GACxE,KAAKyC,cAAerC,OAAO4B,KAA4BC,QAAQ,CAAA;IAEnE,CAAA,EACCZ,OAAO,KAAKzB,WAAW,EACvB0B,WAAWlB,OAAOmB,eAAe,CAAA,CAAE;AAGtCf,WACGC,MAAM,MAAA;AACLoB,iBAAWnB,QAAQ,CAACK,UAAAA;AAClB,cAAMC,aAAaC,gBAAgBF,MAAMF,IAAI;AAE7CL,eAAOO,MAAMG,OAAOC,YAAW,CAAA,EAAqBH,YAAY,KAAKI,aAAaL,KAAAA,CAAAA;MACpF,CAAA;IACF,CAAA,EACCM,OAAO,KAAKzB,WAAW,EACvB0B,WAAW;MACVoB,aAAa,KAAK5C,MAAMC,QAAQqC,SAAS;SACpChC,OAAO4B,KAA4BT,eAAe,CAAA;KACxD;AAEH,WAAO;EACT;EAEUT,aAAaH,OAAqC;AAC1D,WAAO,CAAC,EAAEgC,SAAQ,MAAe;AAC/B,aAAOA,SAASC,SAAS/B,KAAKgC,QAAQlC,MAAMmC,GAAG,CAAA;IACjD;EACF;EAEU1B,aAAaL,OAAqC;AAC1D,WAAO,OAAO,EAAEgC,SAASC,SAASC,QAAQN,SAAQ,MAAe;AAC/D,YAAMO,aAAa,IAAInC,MAAMoC,WAAW;QAAErD,OAAO,KAAKA;MAAM,GAAGiD,SAASnC,IAAI,WAAA,CAAA;AAE5E,YAAMwC,gBAAgB;QACpB,GAAGJ;QACHC;QACAI,OAAOL,QAAQM,GAAE;QACjBC,SAAS;UACP,GAAGP,QAAQQ,KAAI;UACf,GAAGR,QAAQS,SAAQ;QACrB;QACAvC,QAAQ8B,QAAQ9B,OAAM,EAAGC,YAAW;MACtC;AAEA,YAAMuC,eAAe,MAAMR,WAAWnC,MAAMa,MAAM,EAAEwB,eAAeT,QAAAA;AAEnE,UAAI5B,MAAM4C,aAAa;AACrBhB,iBAASiB,OAAO,gBAAgB7C,MAAM4C,WAAW;MACnD;AAEA,aAAOhB,SAASkB,KAAKH,YAAAA;IACvB;EACF;EAEUrB,iBAAiBJ,UAA4B;AACrD,UAAM6B,YAAY;MAChBlC,QAAQ,KAAK9B,MAAMC,QAAQqC;MAC3B2B,cAAc;IAChB;AAEA,WAAO,OAAO,EAAEpB,SAAQ,MAAe;AACrC,YAAMqB,QAAQ,MAAM,KAAKlE,MAAMmE,YAAY;QACzC,GAAGH;QACH,GAAI7B,SAASC,WAAU,KAAM,CAAC;MAChC,CAAA;AAEA,aAAOS,SAASkB,KAAKG,KAAAA;IACvB;EACF;EAEUzB,iBAAiBN,UAA4B;AACrD,WAAO,OAAOiC,QAAAA;AACZ,YAAM,EAAElB,SAASL,UAAUM,QAAQF,QAAO,IAAKmB;AAE/C,YAAMC,YAAY,MAAMlC,SAASmC,YAC/B;QACEC,SAASrB,QAAQqB,QAAO;QACxBhB,OAAOL,QAAQM,GAAE;QACjBL;QACAqB,MAAMtB,QAAQQ,KAAI;MACpB,GACAU,GAAAA;AAGF,UAAIC,WAAW;AACbpB,iBAASwB,IAAI,aAAaJ,SAAAA;AAE1B,cAAMK,aAAazB,SAASnC,IAAI,YAAA;AAEhC,cAAMmC,SAAS0B,OAAAA;AAEf,YAAID,YAAY;AACd,iBAAO7B,SAAS+B,SAASF,UAAAA;QAC3B;AAEA,eAAO7B,SAAS+B,SAAS,KAAK5E,MAAMC,QAAQC,QAAQ;MACtD;AAEA,YAAMgE,QAAQ,MAAM,KAAKlE,MAAMmE,YAAY;QACzCrC,QAAQ,KAAK9B,MAAMC,QAAQqC;QAC3B2B,cAAc;QACd,GAAG9B,SAASC,WAAU;MACxB,CAAA;AAEA,aAAOS,SAASkB,KAAKG,KAAAA;IACvB;EACF;EAEUvB,cAAcR,UAA4B;AAClD,WAAO,OAAO,EAAEe,SAASL,UAAUI,QAAO,MAAe;AACvD,YAAMd,SAAS0C,aAAa;QAAEC,KAAK5B;QAAS6B,KAAKlC;MAAS,CAAA;AAE1DI,eAAS+B,OAAO,WAAA;AAChB,YAAM/B,SAAS0B,OAAAA;AAEf,aAAO9B,SAAS+B,SAAS,KAAK5E,MAAMC,QAAQqC,SAAS;IACvD;EACF;AACF;","names":["path","router","Router","AdminRouter","checkSession","loginPath","ctx","next","session","get","response","redirect","parsePathParams","routePath","replace","normalizePath","adminPath","rootPath","strippedRootPath","AdminJSRouter","groupPrefix","constructor","admin","options","rootPath","startsWith","slice","buildRouter","config","routes","assets","AdminRouter","router","group","forEach","asset","get","path","assetHandler","route","parsedPath","parsePathParams","method","toLowerCase","routeHandler","prefix","middleware","middlewares","buildAuthenticatedRouter","bundleComponentsRoute","find","r","action","authRoutes","filter","env","auth","provider","getUiProps","normalizePath","loginPath","loginViewHandler","post","loginFormHandler","logoutPath","logoutHandler","checkSession","response","download","resolve","src","session","request","params","controller","Controller","parsedRequest","query","qs","payload","body","allFiles","handledRoute","contentType","header","send","baseProps","errorMessage","login","renderLogin","ctx","adminUser","handleLogin","headers","data","put","redirectTo","commit","redirect","handleLogout","req","res","forget"]}